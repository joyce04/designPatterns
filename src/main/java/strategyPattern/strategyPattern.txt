*content from Head first design patterns by OReily
(text and source code included : summary and codes for study purpose only)

Strategy Pattern : 알고리즘 군을 정의하고 각각을 캡슐화하여 교환해서 사용할 수 있도록 만든다
1)  Duck
    -quack()
    -swim()
    -abstract display()

    MallardDuck extends Duck
    -display()

2) 새로운 기능 fly()추가 하지만 날지 못하는 오리까지 해당 기능을 상속 받게 됨
3) interface로 flyable을 구현 -> 중복코드 증가 및 코드 재사용 불가해짐
4) 디자인 원칙 : application에서 달라지는 부분을 찾아내고 달라지지 않는 부분으로 부터 분리시킨다

Client
    Duck
        -FlyBehavior flyBehavior
        -QuackBehavior quackBehavior
        -abstract disply()
        -swim()
        -performQuack(){ flyBehavior.perform();}
        -performFly(){ quackBehavior.perform();}

    MallardDuck extends Duck
        -display()
    RedheadDuck extends Duck
        -display()

Interface
    FlyBehavior
        -fly()

    FlyWithWings implement FlyBehavior
        -fly()
    FlyNoWay implement FlyBehavior
        -fly()

Interface
    QuackBehavior
        -quack()

    Quack implements QuackBehavior
        -quack()
    Squack implements QuackBehavior
        -quack()